name: 🧪 Development CI/CD

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, production ]

env:
  NODE_VERSION: '18'
  PHP_VERSION: '8.1'

jobs:
  # Job 1: Code Quality Checks
  quality:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, dom, fileinfo, mysql, zip, gd, curl, json, pdo, pdo_mysql, tokenizer, xml, ctype, bcmath, openssl, iconv
          coverage: xdebug

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install Composer dependencies
        run: composer install --no-interaction --prefer-dist

      - name: 📥 Install NPM dependencies
        run: npm ci

      - name: 📋 Copy environment file
        run: cp .env.example .env

      - name: 🔑 Generate application key
        run: php artisan key:generate

      - name: 🧹 Clear caches
        run: |
          php artisan config:clear
          php artisan cache:clear
          php artisan route:clear
          php artisan view:clear

      - name: 📊 PHP CodeSniffer
        run: |
          composer require --dev squizlabs/php_codesniffer
          ./vendor/bin/phpcs --standard=PSR12 app/ platform/ --ignore=vendor/,node_modules/ || true

      - name: 🔍 PHPStan Static Analysis
        run: |
          composer require --dev larastan/larastan
          ./vendor/bin/phpstan analyse --memory-limit=2G || true

      - name: 🧪 PHPUnit Tests
        run: |
          php artisan test --coverage --coverage-clover=coverage.xml
        env:
          DB_CONNECTION: sqlite
          DB_DATABASE: ":memory:"

      - name: 📤 Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: 🔨 Build assets
        run: npm run dev

      - name: 🧪 NPM audit
        run: npm audit --audit-level=high || true

  # Job 2: Security Checks
  security:
    name: 🔒 Security Audit
    runs-on: ubuntu-latest

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 📥 Install dependencies
        run: composer install --no-dev --no-interaction

      - name: 🔍 Composer security audit
        run: composer audit --no-dev || true

      - name: 🔍 GitHub Security Alerts
        uses: github/super-linter@v4
        env:
          DEFAULT_BRANCH: main
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          VALIDATE_ALL_CODEBASE: false
          VALIDATE_PHP: true
          VALIDATE_JAVASCRIPT_ES: true
          VALIDATE_JSON: true
          VALIDATE_YAML: true

  # Job 3: Performance Testing
  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    needs: quality

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          composer install --no-interaction --prefer-dist
          npm ci

      - name: 🔨 Build production assets
        run: npm run production

      - name: 📋 Setup environment
        run: |
          cp .env.example .env
          php artisan key:generate

      - name: 🧪 Run performance tests
        run: |
          # Simple performance test using curl
          php artisan serve --host=127.0.0.1 --port=8000 &
          sleep 10
          
          # Test homepage load time
          curl -w "Total time: %{time_total}s\n" -o /dev/null -s http://127.0.0.1:8000
          
          # Test admin panel load time
          curl -w "Admin time: %{time_total}s\n" -o /dev/null -s http://127.0.0.1:8000/admin || true

  # Job 4: Deploy to Staging (only for main branch)
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality, security, performance]
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐘 Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📥 Install dependencies
        run: |
          composer install --no-dev --optimize-autoloader --no-interaction
          npm ci

      - name: 🔨 Build production assets
        run: npm run production

      - name: 🧹 Optimize application
        run: |
          php artisan config:cache
          php artisan route:cache
          php artisan view:cache

      - name: 📦 Create staging package
        run: |
          tar -czf botble-staging-$(date +%Y%m%d-%H%M%S).tar.gz \
            --exclude='.git' \
            --exclude='.github' \
            --exclude='node_modules' \
            --exclude='.env' \
            --exclude='tests' \
            --exclude='phpunit.xml' \
            .

      - name: 📤 Upload to staging
        run: |
          echo "🚀 Deploying to staging environment..."
          # Add your staging deployment logic here
          # Example: Upload to staging server, run deployment scripts, etc.

  # Job 5: Notify team
  notify:
    name: 📢 Notify Team
    runs-on: ubuntu-latest
    needs: [quality, security, performance]
    if: always()

    steps:
      - name: 📢 Create notification
        run: |
          if [ "${{ needs.quality.result }}" == "success" ] && [ "${{ needs.security.result }}" == "success" ] && [ "${{ needs.performance.result }}" == "success" ]; then
            echo "✅ All checks passed! Ready for deployment."
          else
            echo "❌ Some checks failed. Please review the logs."
          fi

      - name: 📝 Update PR comment
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && 
              comment.body.includes('## 🧪 Development CI/CD Results')
            );
            
            const body = `## 🧪 Development CI/CD Results
            
            | Job | Status |
            | --- | --- |
            | 🔍 Code Quality | ${{ needs.quality.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | 🔒 Security Audit | ${{ needs.security.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            | ⚡ Performance Tests | ${{ needs.performance.result == 'success' && '✅ Passed' || '❌ Failed' }} |
            
            **Commit**: \`${{ github.sha }}\`
            **Branch**: \`${{ github.ref_name }}\`
            **Triggered by**: ${{ github.actor }}`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
